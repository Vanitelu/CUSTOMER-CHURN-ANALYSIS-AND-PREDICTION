
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
     

# Load the dataset
df = pd.read_csv("/content/Telco_Customer_Churn_Dataset .csv")
df.head()

df.info()

df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
df['TotalCharges'] = df['TotalCharges'].fillna(0)

binary_cols = ['Partner', 'Dependents', 'PhoneService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',
               'TechSupport', 'StreamingTV', 'StreamingMovies', 'PaperlessBilling', 'Churn']
for col in binary_cols:
    df[col] = df[col].map({'Yes': 1, 'No': 0})

df['gender'] = df['gender'].map({'Male': 1, 'Female': 0})


df = pd.get_dummies(df, columns=['Contract', 'InternetService'], drop_first=True)

# Feature Selection and Scaling
segmentation_features = ['tenure', 'MonthlyCharges', 'Contract_One year', 'Contract_Two year', 'InternetService_Fiber optic', 'InternetService_No']

# Handle missing columns more gracefully
missing_cols = set(segmentation_features) - set(df.columns)
for c in missing_cols:
    df[c] = 0

X = df[segmentation_features]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# K-Means Clustering with Silhouette Score
silhouette_scores = []
for n_clusters in range(2, 7):
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init = 'auto') #explicitly declare n_init
    cluster_labels = kmeans.fit_predict(X_scaled)
    silhouette_avg = silhouette_score(X_scaled, cluster_labels)
    silhouette_scores.append(silhouette_avg)
    print(f"For n_clusters = {n_clusters}, the average silhouette_score is : {silhouette_avg}")

plt.plot(range(2, 7), silhouette_scores, marker='o')
plt.title('Silhouette Score vs. Number of Clusters', fontsize=14, color='darkblue')
plt.xlabel('Number of Clusters', fontsize=12, color='darkgreen')
plt.ylabel('Silhouette Score', fontsize=12, color='darkgreen')
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.show()

optimal_clusters = 3  # Adjust based on the Silhouette Score plot

kmeans = KMeans(n_clusters=optimal_clusters, random_state=42, n_init = 'auto') #explicitly declare n_init
df['cluster'] = kmeans.fit_predict(X_scaled)

df['cluster'].value_counts()

# Churn Analysis within Segments
cluster_churn_rate = df.groupby('cluster')['Churn'].value_counts(normalize=True).unstack().fillna(0)
print("Churn Rate by Cluster:\n", cluster_churn_rate)

# Visualize churn rate by cluster with enhancements
ax = cluster_churn_rate.plot(kind='bar', stacked=False, figsize=(10, 6), color=['skyblue', 'salmon'])  # Set figure size and colors
plt.title('Churn Rate by Cluster', fontsize=16, color='darkblue')
plt.xlabel('Cluster', fontsize=12, color='darkgreen')
plt.ylabel('Churn Rate', fontsize=12, color='darkgreen')
plt.xticks(rotation=0, fontsize=10)
plt.yticks(fontsize=10)

# Add value annotations on top of the bars
for p in ax.patches:
    width = p.get_width()
    height = p.get_height()
    x, y = p.get_xy()
    ax.annotate(f'{height:.2%}', (x + width/2, y + height*1.01), ha='center', fontsize=10, color='black')  # Added percentage formatting

plt.legend(title='Churn', labels=['No Churn', 'Churn'], fontsize=10)
plt.show()

# Identifying High-Value Customers at Risk of Churn
high_value_threshold_monthly = df['MonthlyCharges'].quantile(0.75)
high_value_threshold_total = df['TotalCharges'].quantile(0.75)

high_value_customers = df[(df['MonthlyCharges'] >= high_value_threshold_monthly) & (df['TotalCharges'] >= high_value_threshold_total)]

high_value_churn_risk = high_value_customers.groupby('cluster')['Churn'].value_counts(normalize=True).unstack().fillna(0)
print("\nHigh-Value Customer Churn Risk by Cluster:\n", high_value_churn_risk)

# Visualize high value churn risk with enhancements
ax = high_value_churn_risk.plot(kind='bar', stacked=False, figsize=(10, 6), color=['skyblue', 'salmon'])  # Set figure size and colors
plt.title('High-Value Customer Churn Risk by Cluster', fontsize=16, color='darkblue')
plt.xlabel('Cluster', fontsize=12, color='darkgreen')
plt.ylabel('Churn Rate', fontsize=12, color='darkgreen')
plt.xticks(rotation=0, fontsize=10)
plt.yticks(fontsize=10)

# Add value annotations on top of the bars
for p in ax.patches:
    width = p.get_width()
    height = p.get_height()
    x, y = p.get_xy()
    ax.annotate(f'{height:.2%}', (x + width/2, y + height*1.01), ha='center', fontsize=10, color='black')  # Added percentage formatting

plt.legend(title='Churn', labels=['No Churn', 'Churn'], fontsize=10)
plt.show()

highest_churn_cluster = high_value_churn_risk.index[high_value_churn_risk[1].argmax()]
at_risk_customers = high_value_customers[(high_value_customers['cluster'] == highest_churn_cluster) & (high_value_customers['Churn'] == 1)]

print("\nExample High-Value Customers at Risk (Cluster {}):\n".format(highest_churn_cluster))

if not at_risk_customers.empty:
    print(at_risk_customers[['customerID', 'MonthlyCharges', 'TotalCharges', 'tenure']])
else:
    print("No high-value churners found in that cluster")

# Cluster Profiles: Detailed Analysis of Each Cluster
print("\n--- Cluster Profiles ---")
cluster_profiles = df.groupby('cluster').agg({
    'tenure': 'mean',
    'MonthlyCharges': 'mean',
    'TotalCharges': 'mean',
    'Partner': 'mean',  # Proportion with partner
    'Dependents': 'mean', # Proportion with dependents
    'SeniorCitizen': 'mean', # Proportion of senior citizens
    'Contract_One year': 'mean', #Proportion with one year contract
    'Contract_Two year': 'mean', #Proportion with two year contract
    'InternetService_Fiber optic': 'mean', # Proportion using fiber optic
    'InternetService_No': 'mean',# Proportion without internet
    'Churn': 'mean'  # Churn Rate
})
print(cluster_profiles)

# Deeper Dive into High-Churn Clusters
print("\n--- Detailed Analysis of High-Churn Cluster(s) ---")

# Identify the cluster(s) with the highest churn rate.  Handling potential ties.
highest_churn_clusters = cluster_churn_rate[cluster_churn_rate[1] == cluster_churn_rate[1].max()].index.tolist()

for cluster_id in highest_churn_clusters:
    print(f"\n--- Analysis for Cluster {cluster_id} ---")

    # Demographics and Relationship Status
    print("\nDemographics & Relationships:")
    print(f"  Average Senior Citizen: {df[df['cluster'] == cluster_id]['SeniorCitizen'].mean():.2f}")
    print(f"  Proportion with Partner: {df[df['cluster'] == cluster_id]['Partner'].mean():.2f}")
    print(f"  Proportion with Dependents: {df[df['cluster'] == cluster_id]['Dependents'].mean():.2f}")

    # Service Usage Patterns
    print("\nService Usage:")
    print(f"  Average Monthly Charges: ${df[df['cluster'] == cluster_id]['MonthlyCharges'].mean():.2f}")
    print(f"  Average Tenure: {df[df['cluster'] == cluster_id]['tenure'].mean():.2f} months")
    print(f"  Proportion Fiber Optic: {df[df['cluster'] == cluster_id]['InternetService_Fiber optic'].mean():.2f}")
    print(f"  Proportion No Internet: {df[df['cluster'] == cluster_id]['InternetService_No'].mean():.2f}")

    # Contract Preferences
    print("\nContract Preferences:")
    print(f"  Proportion One-Year Contract: {df[df['cluster'] == cluster_id]['Contract_One year'].mean():.2f}")
    print(f"  Proportion Two-Year Contract: {df[df['cluster'] == cluster_id]['Contract_Two year'].mean():.2f}")

    #Payment Type
    print("\nPayment Method Preference:")
    payment_counts = df[df['cluster'] == cluster_id]['PaymentMethod'].value_counts(normalize=True)
    print(payment_counts)

    #churn Rate
    print(f"Churn Rate: {df[df['cluster'] == cluster_id]['Churn'].mean():.2f}")

    #Visualize Service Usage Patterns in the Cluster (Example)
    plt.figure(figsize=(8, 6))
    sns.histplot(df[df['cluster'] == cluster_id]['MonthlyCharges'], kde=True) #Histogram with KDE
    plt.title(f"Distribution of Monthly Charges in Cluster {cluster_id}", fontsize=14)
    plt.xlabel("Monthly Charges", fontsize=12)
    plt.ylabel("Frequency", fontsize=12)
    plt.show()

# Identifying Key Drivers of Churn within Each Segment
# (This would ideally involve building a classification model, but for this example, we'll look at correlations)
print("\n--- Churn Correlation Analysis within Segments ---")
for cluster_id in range(optimal_clusters):  # Iterate through each cluster
    print(f"\n--- Correlation Analysis for Cluster {cluster_id} ---")
    cluster_data = df[df['cluster'] == cluster_id]

    # Select only numeric columns for correlation calculation
    numeric_columns = cluster_data.select_dtypes(include=np.number).columns
    if 'Churn' in numeric_columns:
        correlation_matrix = cluster_data[numeric_columns].corr()['Churn'].sort_values(ascending=False)
        print(correlation_matrix)
    else:
        print("Churn column not found in numeric columns for this cluster.")
